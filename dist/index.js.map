{"version":3,"sources":["../src/index.js"],"names":["Pollerloop","polling","publ","destructors","Set","running","stopped","stopping","start","newStopping","err","forEach","destructor","ms","timer","stop","add","timeout","undefined"],"mappings":";;;;;;;;;;;AAAA;;AAEA;;AAEA;;;;;;;AAQA,IAAMA,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAa;AAC5B,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ;AACA,MAAIC,QAAJ;;AAEAL,EAAAA,IAAI,CAACM,KAAL,GAAa,UAACC,WAAD,EAAiB;AAC1BF,IAAAA,QAAQ,GAAGE,WAAX;AACAJ,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,OAAO,GAAGL,OAAO,CACb,UAACS,GAAD,EAAS;AACLP,MAAAA,WAAW,CAACQ,OAAZ,CAAoB,UAAAC,UAAU;AAAA,eAAIA,UAAU,EAAd;AAAA,OAA9B;AACA,UAAIF,GAAJ,EAASH,QAAQ,CAACG,GAAD,CAAR,CAAT,KAA6BH,QAAQ;AACxC,KAJY,EAKb;AAAA,aAAMF,OAAN;AAAA,KALa,EAMb,UAACQ,EAAD,EAAQ;AACJ,UAAMC,KAAK,GAAG,oCAAMD,EAAN,EAAU,YAAM;AAC1BV,QAAAA,WAAW,UAAX,CAAmBW,KAAK,CAACC,IAAzB;AACH,OAFa,CAAd;AAGAZ,MAAAA,WAAW,CAACa,GAAZ,CAAgBF,KAAK,CAACC,IAAtB;AACA,aAAOD,KAAK,CAACG,OAAN,UAAoB,YAAM,CAAE,CAA5B,CAAP;AACH,KAZY,CAAjB;AAeA,WAAOX,OAAP;AACH,GAnBD;;AAqBAJ,EAAAA,IAAI,CAACa,IAAL,GAAY,YAAM;AACdV,IAAAA,OAAO,GAAG,KAAV;AACAF,IAAAA,WAAW,CAACQ,OAAZ,CAAoB,UAAAC,UAAU;AAAA,aAAIA,UAAU,EAAd;AAAA,KAA9B;AACA,WAAON,OAAO,SAAP,CAAc,YAAM,CAAE,CAAtB,CAAP;AACH,GAJD;;AAMAJ,EAAAA,IAAI,CAACU,UAAL,GAAkB,YAAM;AACpB,QAAIP,OAAJ,EAAa,OAAOH,IAAI,CAACa,IAAL,EAAP;AACb,WAAOG,SAAP;AACH,GAHD;;AAKA,SAAOhB,IAAP;AACH,CAxCD;;eA0CeF,U","sourcesContent":["import delay from 'interruptible-timer';\n\n// const isTest = () => process.env.NODE_ENV === 'test' && global.logger;\n\n/*\n三种情况\n\n- 自动结束\n- 手动结束\n- 异常结束\n*/\n\nconst Pollerloop = (polling) => {\n    const publ = {};\n    const destructors = new Set();\n    let running;\n    let stopped;\n    let stopping;\n\n    publ.start = (newStopping) => {\n        stopping = newStopping;\n        running = true;\n        stopped = polling(\n            (err) => {\n                destructors.forEach(destructor => destructor());\n                if (err) stopping(err); else stopping();\n            },\n            () => running,\n            (ms) => {\n                const timer = delay(ms, () => {\n                    destructors.delete(timer.stop);\n                });\n                destructors.add(timer.stop);\n                return timer.timeout.catch(() => {});\n            },\n        );\n\n        return stopped;\n    };\n\n    publ.stop = () => {\n        running = false;\n        destructors.forEach(destructor => destructor());\n        return stopped.catch(() => {});\n    };\n\n    publ.destructor = () => {\n        if (running) return publ.stop();\n        return undefined;\n    };\n\n    return publ;\n};\n\nexport default Pollerloop;\n"],"file":"index.js"}