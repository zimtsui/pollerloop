{"version":3,"sources":["../src/index.js"],"names":["isTest","process","env","NODE_ENV","constructor","polling","publ","destructors","Set","running","stopped","start","ms","timer","stop","console","log","size","add","timeout","then","forEach","destructor","undefined"],"mappings":";;;;;;;;;;;AAAA;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS;AAAA,SAAMC,OAAO,CAACC,GAAR,CAAYC,QAAZ,IAAwB,MAA9B;AAAA,CAAf;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,CAACC,OAAD,EAAa;AAC7B,MAAMC,IAAI,GAAG,EAAb;AACA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,MAAIC,OAAJ;AACA,MAAIC,OAAJ;;AAEAJ,EAAAA,IAAI,CAACK,KAAL,GAAa,YAAM;AACfF,IAAAA,OAAO,GAAG,IAAV;AACAC,IAAAA,OAAO,GAAGL,OAAO,CACb;AAAA,aAAMI,OAAN;AAAA,KADa,EAEb,UAACG,EAAD,EAAQ;AACJ,UAAMC,KAAK,GAAG,oCAAMD,EAAN,EAAU,YAAM;AAC1BL,QAAAA,WAAW,UAAX,CAAmBM,KAAK,CAACC,IAAzB;AACAd,QAAAA,MAAM,MAAMe,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,WAAW,CAACU,IAA7C,CAAZ;AACH,OAHa,CAAd;AAIAV,MAAAA,WAAW,CAACW,GAAZ,CAAgBL,KAAK,CAACC,IAAtB;AACAd,MAAAA,MAAM,MAAMe,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,WAAW,CAACU,IAA7C,CAAZ;AACA,aAAOJ,KAAK,CAACM,OAAb;AACH,KAVY,CAAjB;;AAYA,QAAInB,MAAM,EAAV,EAAc;AACV,aAAOU,OAAO,CAACU,IAAR,CAAa,YAAM;AACtBL,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCT,WAAW,CAACU,IAA7C;AACH,OAFM,CAAP;AAGH;;AACD,WAAOP,OAAP;AACH,GApBD;;AAsBAJ,EAAAA,IAAI,CAACQ,IAAL,GAAY,YAAM;AACdL,IAAAA,OAAO,GAAG,KAAV;AACAF,IAAAA,WAAW,CAACc,OAAZ,CAAoB,UAAAC,UAAU;AAAA,aAAIA,UAAU,EAAd;AAAA,KAA9B;AACA,WAAOZ,OAAP;AACH,GAJD;;AAMAJ,EAAAA,IAAI,CAACgB,UAAL,GAAkB,YAAM;AACpB,QAAIb,OAAJ,EAAa,OAAOH,IAAI,CAACQ,IAAL,EAAP;AACb,WAAOS,SAAP;AACH,GAHD;;AAKA,SAAOjB,IAAP;AACH,CAxCD;;eA0Ce;AACXF,EAAAA,WAAW,EAAXA;AADW,C","sourcesContent":["import delay from 'interruptible-timer';\n\nconst isTest = () => process.env.NODE_ENV == 'test';\n\nconst constructor = (polling) => {\n    const publ = {};\n    const destructors = new Set();\n    let running;\n    let stopped;\n\n    publ.start = () => {\n        running = true;\n        stopped = polling(\n            () => running,\n            (ms) => {\n                const timer = delay(ms, () => {\n                    destructors.delete(timer.stop);\n                    isTest() && console.log('destructors size:', destructors.size);\n                });\n                destructors.add(timer.stop);\n                isTest() && console.log('destructors size:', destructors.size);\n                return timer.timeout;\n            },\n        );\n        if (isTest()) {\n            return stopped.then(() => {\n                console.log('destructors size:', destructors.size);\n            });\n        }\n        return stopped;\n    };\n\n    publ.stop = () => {\n        running = false;\n        destructors.forEach(destructor => destructor());\n        return stopped;\n    };\n\n    publ.destructor = () => {\n        if (running) return publ.stop();\n        return undefined;\n    };\n\n    return publ;\n};\n\nexport default {\n    constructor,\n};\n"],"file":"index.js"}